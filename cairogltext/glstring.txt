
The GLString object is constructed with a font name, a boolean indicating if
the font is bold, and positioning data: 

Horizontal position: left, center, right: the location of the center text
vertical position : BASELINE vs MEDIAN 


------------------------------------------------------------------------
Internal Guts
------------------------------------------------------------------------

We'd like to have some maximum bound on the amount of texture (etc)
memory we use for this. And then use some sort of LRU cache for it. 

We have three continually-maintained pieces of data:

A std::list of texture names. The k of this list is the most-recently-used texture name, and the front is the last. 
-------------------------------------------------------

The list stores a struct which consists of:
textprop (struct of std::string, int size)
textureID

and then the map stores 
textprop -> list::iterator

So the normal query operation would be: 

for a queried textprop:
look up in the map -- if it exists, find it in the list (via the iterator)
  and return that textureId
else:
  if cache full:  
     remove oldest
  add to cache

-------------------------------------------------------------

positioning: what does it mean to render text at a specific position
(don't be too anal here!)

Let's be honest: we really want to generally render in the vertical
center of the text, and then the horizontal center, left, or right.

In what coordinate space? Sometimes screen, sometimes world:

screen: for status text that's "always on screen", such as for the spikewaveform views to show source status

world: Timeline renderer

-------------------------------------------------------------

